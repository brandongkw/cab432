<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Processing App</title>
    <link rel="stylesheet" href="/styles.css">
</head>

<body>
    <nav class="navbar">
        <div class="navbar-title">
            <a href="/" style="color: white; text-decoration: none;">Video Processing App</a>
        </div>
        <div class="navbar-links">
            <% if (user) { %>
                <a href="/logout">Logout</a>
                <% } else { %>
                    <a href="/login">Login</a>
                    <a href="/register">Register</a>
                    <% } %>
        </div>
    </nav>
    <div class="youtube-search-container">
        <form action="/search" method="GET">
            <input type="text" name="q" placeholder="Search YouTube" required>
            <button type="submit">Search</button>
        </form>
    </div>
    <div class="content-wrapper">
        <div class="file-upload-wrapper">
            <form id="uploadForm" action="/upload" method="POST" enctype="multipart/form-data">
                <label class="custom-file-upload">
                    <input type="file" name="videoFile" id="fileInput" accept="video/*" required
                        onchange="document.getElementById('file-chosen').textContent = this.files[0].name" />
                    Choose File
                </label>
                <span id="file-chosen">No file chosen</span>
                <button type="submit">Upload Video</button>

                <div class="progress-bar" id="progressContainer" style="display: none;">
                    <div id="progress-bar-fill"
                        style="width: 0%; height: 10px; background-color: green; border: 1px solid #000; border-radius: 5px;">
                    </div>
                </div>

                <div id="uploadStatus" style="display: none;">Uploading...</div>

            </form>
        </div>

        <div class="video-display-wrapper">
            <h2>Uploaded Video:</h2>
            <video id="videoPlayer" controls>
                <% if (preview) { %>
                    <source id="videoSource" src="<%= preview %>" type="video/mp4">
                    <% } else if (video) { %>
                        <source id="videoSource" src="/videos/<%= video %>" type="video/mp4">
                        <% } %>
                            <p>Your browser does not support the video tag.</p>
            </video>
        </div>

        <div class="conversion-container">
            <h3>Convert to:</h3>
            <form action="/process" method="POST">
                <input type="hidden" name="video" value="<%= video ? video : '' %>">
                <label for="format">Format:</label>
                <select name="format" id="format">
                    <option value="mp4">MP4</option>
                    <option value="avi">AVI</option>
                    <option value="mov">MOV</option>
                </select>
                <label for="resolution">Resolution:</label>
                <select name="resolution" id="resolution">
                    <option value="1080p">1080p</option>
                    <option value="720p">720p</option>
                    <option value="480p">480p</option>
                </select>
                <button type="submit">Convert Video</button>
            </form>
        </div>
    </div>

    <script>
        const fileInput = document.getElementById('fileInput');
        const fileNameDisplay = document.getElementById('file-chosen');
        const videoPlayer = document.getElementById('videoPlayer');
        const videoSource = document.getElementById('videoSource');
        const uploadStatus = document.getElementById('uploadStatus');
        const progressContainer = document.getElementById('progressContainer');

        fileInput.addEventListener('change', () => {
            fileNameDisplay.textContent = fileInput.files[0].name;
        });

        document.getElementById('uploadForm').addEventListener('submit', function (event) {
            event.preventDefault();  // Prevent the default form submission

            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];  // Get the file from the input

            if (!file) {
                alert('No file selected.');
                return;
            }

            uploadFileWithProgress(file);  // Call the function to handle the upload
        });

        function uploadFileWithProgress(file) {
            const xhr = new XMLHttpRequest();
            const formData = new FormData();
            formData.append('videoFile', file);

            // Show progress bar and reset it
            const progressContainer = document.getElementById('progressContainer');
            progressContainer.style.display = 'block';
            document.getElementById('progress-bar-fill').style.width = '0%';

            xhr.open('POST', '/upload', true);

            // Update progress bar during upload
            xhr.upload.onprogress = function (event) {
                if (event.lengthComputable) {
                    const percentComplete = (event.loaded / event.total) * 100;
                    document.getElementById('progress-bar-fill').style.width = percentComplete + '%';
                }
            };

            // Simulate progress during server-side processing after upload is complete
            xhr.onload = function () {
                if (xhr.status === 200) {
                    let simulatedProgress = 100;
                    const simulateProgressInterval = setInterval(() => {
                        if (simulatedProgress < 120) {
                            simulatedProgress += 2; // Extend progress by small increments
                            document.getElementById('progress-bar-fill').style.width = `${simulatedProgress}%`;
                        }
                    }, 200); // Increase progress slowly after upload

                    try {
                        const response = JSON.parse(xhr.responseText);
                        // Update video preview with the new video
                        const videoSource = document.getElementById('videoSource');
                        videoSource.src = response.preview;  // Use the pre-signed URL from the response
                        document.getElementById('videoPlayer').load();  // Reload the video player

                        // Wait until the video is loaded before hiding the progress bar
                        document.getElementById('videoPlayer').onloadeddata = function () {
                            // Hide the progress bar and stop simulation
                            clearInterval(simulateProgressInterval);
                            progressContainer.style.display = 'none';
                        };
                    } catch (error) {
                        clearInterval(simulateProgressInterval);
                        console.error("Failed to parse JSON response:", error);
                        alert('Failed to upload video. Please try again.');
                    }
                } else {
                    alert('Upload failed! Please try again.');
                }
            };

            xhr.onerror = function () {
                document.getElementById('progress-bar-fill').style.width = '0%';  // Reset progress on error
                progressContainer.style.display = 'none';  // Hide the progress container on error
                alert('Upload failed! Server might be down.');
            };

            xhr.send(formData);
        }

        document.addEventListener("DOMContentLoaded", function () {
            progressContainer.style.display = 'none';  // Ensure progress bar is hidden initially
            uploadStatus.style.display = 'none';  // Ensure upload status is hidden initially
        });
    </script>

<h2>Your Uploaded Videos</h2>
<ul>
    <% if (videos && videos.length > 0) { %>
        <% videos.forEach(function(video) { %>
            <li>
                <h4><%= video.filename %></h4>

                <!-- Preview button -->
                <form action="/preview-video" method="POST" style="display:inline;">
                    <input type="hidden" name="videoUrl" value="<%= video.url %>">
                    <button type="submit">Preview</button>
                </form>

                <!-- Delete button -->
                <form action="/delete-video" method="POST" style="display:inline;">
                    <input type="hidden" name="filename" value="<%= video.filename %>">
                    <button type="submit">Delete</button>
                </form>
            </li>
        <% }); %>
    <% } else { %>
        <p>No videos uploaded yet.</p>
    <% } %>
</ul>

    <script>
        // Fetch and display videos
        fetch('/api/videos')
            .then(response => response.json())
            .then(videos => {
                const videoList = document.getElementById('video-list');
                videos.forEach(video => {
                    const li = document.createElement('li');
                    li.textContent = video.filename;
                    videoList.appendChild(li);

                    // Add delete button
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.onclick = () => deleteVideo(video._id);  // Using _id
                    li.appendChild(deleteButton);
                });
            });

        function deleteVideo(id) {
            fetch(`/api/videos/${id}`, { method: 'DELETE' })  // Using _id
                .then(response => {
                    if (response.ok) {
                        alert('Video deleted');
                    } else {
                        alert('Failed to delete video');
                    }
                    location.reload();
                })
                .catch(error => console.error('Error deleting video:', error));
        }

        function checkStatus(id) {
            fetch(`/api/videos/${id}/status`)  // Using _id
                .then(response => response.json())
                .then(data => alert(`Status: ${data.status}`));
        }

        const progressBarFill = document.getElementById('progress-bar-fill');

        // Setup WebSocket connection
        const ws = new WebSocket('ws://localhost:3000');

        ws.onmessage = function (event) {
            const data = JSON.parse(event.data);
            if (data.progress !== undefined) {
                progressBarFill.style.width = data.progress + '%';
            }
        }
    </script>

    <footer class="footer">
        Video Processing App © 2024
    </footer>
</body>

</html>