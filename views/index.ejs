<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Processing App</title>
    <link rel="stylesheet" href="/styles.css">
</head>

<body>
    <nav class="navbar">
        <div class="navbar-title">
            <a href="/" style="color: white; text-decoration: none;">Video Processing App</a>
        </div>
        <div class="navbar-links">
            <% if (user) { %>
                <a href="/logout">Logout</a>
                <% } else { %>
                    <a href="/login">Login</a>
                    <a href="/register">Register</a>
                    <% } %>
        </div>
    </nav>

    <div class="content-wrapper">
        <div class="file-upload-wrapper">
            <form id="uploadForm" action="/upload" method="POST" enctype="multipart/form-data">
                <label class="custom-file-upload">
                    <input type="file" name="videoFile" id="fileInput" accept="video/*" required
                        onchange="document.getElementById('file-chosen').textContent = this.files[0].name" />
                    Choose File
                </label>
                <span id="file-chosen">No file chosen</span>
                <button type="submit">Upload Video</button>

                <div class="progress-bar" id="progressContainer" style="display: none;">
                    <div id="progress-bar-fill"
                        style="width: 0%; height: 10px; background-color: green; border: 1px solid #000; border-radius: 5px;">
                    </div>
                </div>

                <div id="uploadStatus" style="display: none;">Uploading...</div>

            </form>
        </div>

        <div class="video-display-wrapper">
            <h2>Uploaded Video:</h2>
            <video id="videoPlayer" controls>
                <source id="videoSource" src="<%= preview || '' %>" type="video/mp4">
                <p>Your browser does not support the video tag.</p>
            </video>
        </div>


        <div class="conversion-container">
            <h3>Convert to:</h3>
            <form action="https://group36-web-client-api-alb-1213625636.ap-southeast-2.elb.amazonaws.com/process"
                method="POST">
                method="POST">
                <input type="hidden" name="selectedVideo" id="selectedVideo">
                <input type="hidden" name="userId" value="<%= user['cognito:username'] %>"> <!-- Pass userId here -->
                <label for="format">Format:</label>
                <select name="format" id="format">
                    <option value="mp4">MP4</option>
                    <option value="avi">AVI</option>
                    <option value="mov">MOV</option>
                </select>
                <label for="resolution">Resolution:</label>
                <select name="resolution" id="resolution">
                    <option value="1080p">1080p</option>
                    <option value="720p">720p</option>
                    <option value="480p">480p</option>
                </select>
                <button type="submit">Convert Video</button>
            </form>
        </div>
    </div>

    <div class="video-gallery">
        <h2>Your Uploaded Videos:</h2>
        <% if (videos && videos.length> 0) { %>
            <ul class="video-list">
                <% videos.forEach((video)=> { %>
                    <li class="video-item">
                        <h3>
                            <%= video.filename %>
                        </h3>
                        <video controls width="250">
                            <source src="<%= video.url %>" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <button onclick="selectVideo('<%= video.filename %>', '<%= video.url %>')">Select for
                            Conversion</button>
                        <button onclick="deleteVideo('<%= video.filename %>', '<%= video.videoId %>')">Delete</button>
                    </li>
                    <% }); %>
            </ul>
            <% } else { %>
                <p>No videos uploaded yet.</p>
                <% } %>
    </div>

    <script>
        let socket;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;
        const reconnectDelay = 5000;  // 5 seconds delay for reconnecting
        const progressContainer = document.getElementById('progressContainer');
        const uploadForm = document.getElementById('uploadForm');
        const videoPlayer = document.getElementById('videoPlayer');
        const videoSource = document.getElementById('videoSource');
        const uploadStatus = document.getElementById('uploadStatus');
        const progressBarFill = document.getElementById('progress-bar-fill');

        uploadForm.addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent default form submission

            const formData = new FormData(uploadForm);
            uploadStatus.style.display = 'block';
            uploadStatus.textContent = 'Uploading...'; // Show uploading message
            progressContainer.style.display = 'block'; // Show progress bar during upload
            progressBarFill.style.width = '0%'; // Reset progress bar width

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData,
                });

                const result = await response.json();
                if (response.ok) {
                    uploadStatus.style.display = 'block';
                    uploadStatus.textContent = result.message; // Display success message

                    // Set the video source to the preview URL or reset if not available
                    videoSource.src = result.preview || '';
                    videoPlayer.load(); // Reload the video player with the new source
                    window.location.reload();
                } else {
                    uploadStatus.textContent = result.message || 'Error uploading video';
                }
            } catch (error) {
                console.error('Upload failed:', error);
                uploadStatus.textContent = 'An error occurred while uploading the video. Please try again.';
            }
        });

        function connectWebSocket() {
            socket = new WebSocket('wss://group36-web-client-api-alb-1213625636.ap-southeast-2.elb.amazonaws.com');

            socket.onopen = () => {
                console.log('WebSocket connected');
                reconnectAttempts = 0;  // Reset attempts on successful connection
            };

            socket.onmessage = (event) => {
                const data = JSON.parse(event.data);
                progressContainer.style.display = 'block';  // Always show progress bar when data arrives

                if (data.progress === 'Error') {
                    alert('An error occurred during video processing. Please try again.');
                    progressContainer.style.display = 'none';  // Hide the progress bar on error
                } else {
                    console.log(`Progress: ${data.progress}%`); // Add this line to debug progress
                    progressBarFill.style.width = `${data.progress}%`;

                    if (data.progress === 100) {
                        uploadStatus.textContent = 'Video processing complete.'; // Show processing completion message
                        progressContainer.style.display = 'none';  // Hide the progress bar when processing is complete
                        progressBarFill.style.width = '0%'; // Reset progress bar
                    }
                }
            };

            socket.onclose = () => {
                console.log('WebSocket connection closed');
                attemptReconnect();
            };

            socket.onerror = (error) => {
                console.error('WebSocket error:', error);
                socket.close();  // Close the socket and trigger the reconnect logic
            };
        }

        function attemptReconnect() {
            if (reconnectAttempts < maxReconnectAttempts) {
                reconnectAttempts++;
                console.log(`Attempting to reconnect in ${reconnectDelay / 1000} seconds...`);
                setTimeout(() => {
                    connectWebSocket();
                }, reconnectDelay);
            } else {
                console.log('Max reconnect attempts reached. Could not reconnect to WebSocket.');
                alert('Unable to reconnect to the server. Please try again later.');
            }
        }

        function selectVideo(filename, videoUrl) {
            document.getElementById('selectedVideo').value = filename;
            // alert(`Selected video: ${filename} for conversion`);

            // Update the preview video
            const videoPlayer = document.getElementById('videoPlayer');
            const videoSource = document.getElementById('videoSource');
            videoSource.src = videoUrl;
            videoPlayer.load();  // Reload the video player with the new source
        }

        function deleteVideo(filename, videoId) {
            console.log("Deleting video with filename:", filename, "and videoId:", videoId); // Log to confirm values
            fetch('/delete-video', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ filename, videoId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Video deleted successfully') {
                        alert('Video deleted');
                        window.location.reload(); // Refresh the page to update the video list
                    } else {
                        alert('Error deleting video');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // Initialize WebSocket connection on page load
        connectWebSocket();
    </script>

    <footer class="footer">
        Video Processing App © 2024
    </footer>
</body>

</html>